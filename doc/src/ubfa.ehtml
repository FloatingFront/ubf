<include>layout.mac</include>
<top/>

<article title="UBF(A)"
	 date="2002-03-05"
	 link=""
	 linktitle="">

<h3>UBF(A)</h3>

<p><a href="ubfa_quick.html">UBF(A) - quick summary</a>

<p>UBF(A) is the transport format, it was designed to be easy to parse
and to be easy to write with a text editor. UBF(A) is based on a byte
encoded virtual machine, 26 byte codes are reserved. Instead of
allocating the bye codes from 0 we use the printable character codes
to make the format easy to read.

<h3>Primitive types</h3>

<p>UBF(A) has four primitive types, when a primitive tag is recognized
it is pushed onto the "recognition stack" in our decoder. The
primitive types are:

<dl>
<dt><b>Integers</b>

<dd>Integers are sequences of bytes which could be described by the
regular expression <tt>[-][0-9]+</tt>, that is an optional minus (to
denote a negative integer) and then a sequence of at least one digits.
No restrictions are made as to the precision of the integer, precision
issues will be dealt with in UBF(B).

<dt><b>Strings</b>
<dd>Strings are written enclosed in double quotes, thus:
<pre>
   "...."
</pre>
<p>Within a string two quoting conventions are observed,
<tt>"</tt> must be written <tt>\"</tt> and <tt>\</tt> must be written
<tt>\\</tt> - no other quotings are allowed (this is so we can write a double quote <i>within</i> a string.

<dt><b>Binary Data</b>
<dd>Uninterpreted blocks of binary data are encoded, thus:
<pre>
    Int ~....~
</pre>

<p>First an integer, representing the length of the binary data is
encoded, this is followed by a tilde, the data itself which must be exactly the
length given in the integer and than a closing tilde. The closing tilde
has no significance and is retained for readability. White space can be
added Between the integer length and the data for readability.

<dt><b>Constants</b>
<dd>Constants are encoded as strings, only using a single quote
instead of a double quote.

<p>Constants are commonly form in symbolic languages like lisp, Prolog or
Erlang.  In C they would be represented by hashed strings. The
essential property of an constant is that two constants can be compared for
equality in constant time. These are used for representing
symbolic constants.
</dl>

<p>In addition any item can be followed by a <i>semantic tag</i> this is
written <tt>`...`</tt> - with in the tag the close quote is quoted as in the strings encoding. This tag has no meaning in UBF(A) but might have a meaning in UBF(B). For example:
<pre>
    12456 ~....~ `jpg`
</pre>

<p>Represents 12456 bytes of raw data with the semantic tag "jpg".
UBF(A) does not know what "jpg" means - this is passed on to UBF(B)
which might know what it means - finally the end application is
expected to know what to do with an object of type "jpg", it might
for example know that this represents an image. UBF(A) will just
encode the tag, UBF(B) will type check the tag, and the application
should be able to understand the tag.

<h3>Compound types</h3>

<p>Having defined our four simple type we define two type of "glue"
for making compound objects.

<dl>
<dt><b>Structs</b>
<dd>Structures are written:
<pre>
    { Obj1 Obj2 ... Objn }
</pre>
<p>The byte codes for "{" and "}" are used to delimit a structure.
<tt>Obj1..Objn</tt> are arbitrary UBF(A) objects. The decoder and encoder
must map UBF(A) objects onto an appropriate representation in the
application programming language (for example structs in C, arrays
in java, tuples in Erlang etc.).

<p>Structs are used to represent <i>Fixed numbers of objects</i>

<dt><b>Lists</b>
<dd> Lists are used to represent <i>variable numbers of objects</i>. They are written with the syntax:
<pre>
    # ObjN & ObjN-1 & ... & Obj2 & Obj1
</pre>

<p> This represents a list of objects - the first object in the list in
<tt>Obj1</tt> the second <tt>Obj2</tt> etc.- Note that the objects
are presented in reverse order. Lisp programmers will recognize <tt>#</tt>
as an operator that pushes NIL (or end of list) onto the recognition stack
and <tt>&</tt> as an operator that takes the top two items on the recognition stack and replaces them by a list cell.
</dl>

<p>Finally we need to know when an object has finished.
The operator <tt>$</tt> signifies "end of object". When <tt>$</tt> is encountered there should be only one item on the recognition stack.

<h3>White space</h3>

<p>For convenience blank, carriage return, line feed tab and comma
are treated as white space. Comments can be included in UBF(A) with the
syntax <tt>%...%</tt> the usual quoting convention applies.

<h3>Caching optimizations</h3>

So far we have used exactly 26 control, characters, namely:

<pre>
  %"~'`{}#&\s\n\t\r,-01234567890
</pre>

<p>This leaves us with 230 unallocated byte codes. These are used as follows:
First byte code sequence
<pre>
    &gt;C
</pre>

Where <tt>C</tt> is not one of the reserved byte codes or <tt>&gt;</tt>
means store the top of the recognition stack in the register
<tt>reg[C]</tt> and pop the recognition stack.

<p>Subsequent reuse of the single character <b>C</b>Z means
"push <tt>reg[C]</tt> onto the recognition stack"

</article>
<bot/>






