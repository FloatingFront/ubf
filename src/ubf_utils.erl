-module(ubf_utils).

-export([ubf_contract/1, ubf_contract/2]).

get_type(Name,Mod) ->
    get_type(Name,true,Mod).

get_type(Name,Strict,Mod) ->
    case lists:member(Name,Mod:contract_types()) of
        true ->
            {Type, Tag} = Mod:contract_type(Name),
            {Name, Type, Tag};
        false ->
            if Strict ->
                    exit({undefined_ubf_type,Name});
               true ->
                    undefined
            end
    end.

ubf(Name,Mod) ->
    {Name,Type,_} = get_type(Name,Mod),
    type(Type,Mod).

type(Type,Mod) ->
    io_lib:format("\t\t~s\n", [typeref(Type, Mod)]).

typeref({tuple,Elements},Mod) ->
    io_lib:format("{ ~s }", [join([typeref(Element, Mod) || Element <- Elements], ", ")]);
typeref({record,Name,Elements},Mod) when is_atom(Name) ->
    Values = tl(tl(Elements)),
    RecordKey = {Name,length(Elements)-2},
    Fields = Mod:contract_record(RecordKey),
    io_lib:format("#~s{ ~s }",
                  [Name, join([ io_lib:format("~s=~s", [Field, typeref(Element, Mod)])
                                || {Field,Element} <- lists:zip(Fields,Values) ], ", ")]);
typeref({record_ext,Name,_,_Elements},_Mod) when is_atom(Name) ->
    erlang:exit(fatal);
typeref({prim,integer},_Mod) ->
    "integer()";
typeref({prim,float},_Mod) ->
    "float()";
typeref({prim,atom},_Mod) ->
    "atom()";
typeref({prim,{atom,Attrs}},_Mod) ->
    io_lib:format("atom(~s)", [join([ atom_to_list(Attr) || Attr <- Attrs ], ",")]);
typeref({prim,string},_Mod) ->
    "string()";
typeref({prim,{string,Attrs}},_Mod) ->
    io_lib:format("string(~s)", [join([ atom_to_list(Attr) || Attr <- Attrs ], ",")]);
typeref({prim,proplist},_Mod) ->
    "proplist()";
typeref({prim,{proplist,Attrs}},_Mod) ->
    io_lib:format("proplist(~s)", [join([ atom_to_list(Attr) || Attr <- Attrs ], ",")]);
typeref({prim,binary},_Mod) ->
    "binary()";
typeref({prim,{binary,Attrs}},_Mod) ->
    io_lib:format("binary(~s)", [join([ atom_to_list(Attr) || Attr <- Attrs ], ",")]);
typeref({prim,tuple},_Mod) ->
    "tuple()";
typeref({prim,term},_Mod) ->
    "term()";
typeref({prim,{term,Attrs}},_Mod) ->
    io_lib:format("term(~s)", [join([ atom_to_list(Attr) || Attr <- Attrs ], ",")]);
typeref({prim,void},_Mod) ->
    erlang:exit(fatal);
typeref({prim,Tag},_Mod) ->
    io_lib:format("~p()", [Tag]);
typeref({prim_optional,Tag},_Mod) ->
    io_lib:format("~p()?", [Tag]);
typeref({prim_nil,Tag},_Mod) ->
    io_lib:format("~p(){0}", [Tag]);
typeref({prim_required,Tag},_Mod) ->
    io_lib:format("~p(){1}", [Tag]);
typeref({integer,Value},_Mod) ->
    io_lib:format("~p", [Value]);
typeref({float,Value},_Mod) ->
    io_lib:format("~p", [Value]);
typeref({range,Lo,Hi},_Mod) ->
    io_lib:format("~p..~p", [Lo, Hi]);
typeref({atom,Value},_Mod) ->
    io_lib:format("~p", [Value]);
typeref({string,Value},_Mod) ->
    io_lib:format("~p", [Value]);
typeref({proplist,Value},_Mod) ->
    io_lib:format("~p", [Value]);
typeref({binary,Value},_Mod) ->
    io_lib:format("~p", [Value]);
typeref({alt,Type1,Type2},Mod) ->
    io_lib:format("~s | ~s", [typeref(Type1, Mod), typeref(Type2, Mod)]);
typeref({concat,Type1,Type2},Mod) ->
    io_lib:format("~s++~s", [typeref(Type1, Mod), typeref(Type2, Mod)]);
typeref({list_optional,Element},Mod) ->
    io_lib:format("[~s]?", [typeref(Element, Mod)]);
typeref({list_nil,Element},Mod) ->
    io_lib:format("[~s]{0}", [typeref(Element, Mod)]);
typeref({list_required,Element},Mod) ->
    io_lib:format("[~s]{1}", [typeref(Element, Mod)]);
typeref({list,Element},Mod) ->
    io_lib:format("[~s]", [typeref(Element, Mod)]);
typeref({list_required_and_repeatable,Element},Mod) ->
    io_lib:format("[~s]+", [typeref(Element, Mod)]);
typeref(Type, _Mod) ->
    io_lib:format("~p()", [Type]).

ubf_contract(Mod, FileName) ->
    Contract = ubf_contract(Mod),
    file:write_file(FileName, Contract).

ubf_contract(Mod) when is_list(Mod) ->
    ubf_contract(list_to_atom(Mod));
ubf_contract(Mod) ->
    X0 = [""
          , "%%%"
          , "%%% Auto-generated by ubf_utils:ubf_contract()"
          , "%%% Do not edit manually!"
          , "%%%"
          , ""
          , ""
         ],
    X1 = ["%% --------------------"
          , "%% pre defined types"
          , "%%   - left hand-side is UBF"
          , "%%   - right hand-side is Erlang-like"
          , "%%   - A() means replace with \"A type reference\""
          , "%%   - A() | B() means \"A() or B()\""
          , "%%   - A()? means \"optional A()\""
          , "%%   - A()++B() means \"list A() concatenate list B()"
          , "%%   - A(Attrs) means \"A() subject to the comma-delimited type attributes"
          , "%%"
          , ""
          , "integer()\n\t\tinteger"
          , "integer()?\n\t\tinteger | undefined"
          , ""
          , "float()\n\t\tfloat"
          , "float()?\n\t\tfloat | undefined"
          , ""
          , "integer()..integer()\n\t\tinteger"
          , ""
          , "atom()\n\t\tatom"
          , "atom()?\n\t\tatom | undefined"
          , "atom(AtomAttrs)\n\t\tatom"
          , "atom(AtomAttrs)?\n\t\tatom | undefined"
          , ""
          , "string()\n\t\tstring"
          , "string()?\n\t\tstring | undefined"
          , "string(StringAttrs)\n\t\tstring"
          , "string(StringAttrs)?\n\t\tstring | undefined"
          , ""
          , "binary()\n\t\tbinary"
          , "binary()?\n\t\tbinary | undefined"
          , "binary(BinaryAttrs)\n\t\tbinary"
          , "binary(BinaryAttrs)?\n\t\tbinary | undefined"
          , ""
          , "proplist()\n\t\tproplist"
          , "proplist()?\n\t\tproplist | undefined"
          , "proplist(PropListAttrs)\n\t\tproplist"
          , "proplist(PropListAttrs)?\n\t\tproplist | undefined"
          , ""
          , "tuple()\n\t\ttuple"
          , "tuple()?\n\t\ttuple | undefined"
          , "tuple(TupleAttrs)\n\t\ttuple"
          , "tuple(TupleAttrs)?\n\t\ttuple | undefined"
          , ""
          , "record()\n\t\trecord"
          , "record()?\n\t\trecord | undefined"
          , ""
          , "list()\n\t\tlist"
          , "list()?\n\t\tlist | undefined"
          , "list(){0}\n\t\t[]"
          , "list(){1}\n\t\t[ term ]"
          , "list()+\n\t\t[ terms ]"
          , "list()++list()\n\t\tlist"
          , ""
          , "term()\n\t\tterm"
          , "term()?\n\t\tterm | undefined"
          , "term(TermAttrs)\n\t\tterm"
          , "term(TermAttrs)?\n\t\tterm | undefined"
          , ""
          , "void()\n\t\t /* no result is returned */"
          , "void()?\n\t\t /* no result is returned */ | undefined"
          , ""
          , "true\n\t\ttrue"
          , "false\n\t\tfalse"
          , "undefined\n\t\tundefined"
          , ""
          , "%% --------------------"
          , "%% type attributes"
          , "%%"
          , ""
          , "AtomAttrs"
          , "\t ascii | asciiprintable"
          , "\t nonempty"
          , "\t nonundefined"
          , ""
          , "StringAttrs"
          , "\t ascii | asciiprintable"
          , "\t nonempty"
          , ""
          , "BinaryAttrs"
          , "\t ascii | asciiprintable"
          , "\t nonempty"
          , ""
          , "PropListAttrs"
          , "\t nonempty"
          , ""
          , "TupleAttrs"
          , "\t nonempty"
          , ""
          , "TermAttrs"
          , "\t nonempty"
          , "\t nonundefined"
          , ""
          , "%% --------------------"
          , "%% leaf types"
          , "%%"
          , ""
          , ""
         ],
    X2 = [ [atom_to_list(Name), "()", "\n", ubf(Name,Mod)]
           || Name <- lists:sort(Mod:contract_leaftypes()) ],
    X3 = [""
          , "%% --------------------"
          , "%% UBF-RPC"
          , "%%"
          , ""
         ],
    X4 = [ begin
               Params =
                   case get_type(Input,true,Mod) of
                       {Input, InputType, _} ->
                           typeref(InputType, Mod)
                   end,
               Result =
                   case get_type(Output,false,Mod) of
                       {Output, OutputType, _} ->
                           typeref(OutputType, Mod);
                       undefined ->
                           io_lib:format("~p()", [Output])
                   end,
               join([
                     ""
                     , "%% ----------"
                     , io_lib:format("%% ~s", [Input])
                     , "%%"
                     , io_lib:format("~s =>", [Params])
                     , io_lib:format("   ~s;", [Result])
                    ], "\n")
           end
           || {{prim,Input}, {prim,Output}} <- Mod:contract_anystate() ],
    lists:flatten([ join(L, "\n") || L <- [X0, X1, X2, X3, X4] ]).

join(L, Sep) ->
    lists:flatten(join2(L, Sep)).

join2([A, B|Rest], Sep) ->
    [A, Sep|join2([B|Rest], Sep)];
join2(L, _Sep) ->
    L.
